// Code generated by MockGen. DO NOT EDIT.
// Source: product_struct.go

// Package mock is a generated GoMock package.
package mock

import (
	models "diy_project/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductInterface is a mock of ProductInterface interface.
type MockProductInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductInterfaceMockRecorder
}

// MockProductInterfaceMockRecorder is the mock recorder for MockProductInterface.
type MockProductInterfaceMockRecorder struct {
	mock *MockProductInterface
}

// NewMockProductInterface creates a new mock instance.
func NewMockProductInterface(ctrl *gomock.Controller) *MockProductInterface {
	mock := &MockProductInterface{ctrl: ctrl}
	mock.recorder = &MockProductInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductInterface) EXPECT() *MockProductInterfaceMockRecorder {
	return m.recorder
}

// ListOfProducts mocks base method.
func (m *MockProductInterface) ListOfProducts(r models.ListOfProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfProducts", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOfProducts indicates an expected call of ListOfProducts.
func (mr *MockProductInterfaceMockRecorder) ListOfProducts(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfProducts", reflect.TypeOf((*MockProductInterface)(nil).ListOfProducts), r)
}

// Products mocks base method.
func (m *MockProductInterface) Products(r models.Products) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Products", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Products indicates an expected call of Products.
func (mr *MockProductInterfaceMockRecorder) Products(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Products", reflect.TypeOf((*MockProductInterface)(nil).Products), r)
}

// UpdateProductInput mocks base method.
func (m *MockProductInterface) UpdateProductInput(r models.UpdateProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductInput", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductInput indicates an expected call of UpdateProductInput.
func (mr *MockProductInterfaceMockRecorder) UpdateProductInput(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductInput", reflect.TypeOf((*MockProductInterface)(nil).UpdateProductInput), r)
}
