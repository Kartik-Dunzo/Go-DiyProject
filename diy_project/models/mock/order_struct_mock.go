// Code generated by MockGen. DO NOT EDIT.
// Source: order_struct.go

// Package mock is a generated GoMock package.
package mock

import (
	models "diy_project/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderInterface is a mock of OrderInterface interface.
type MockOrderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderInterfaceMockRecorder
}

// MockOrderInterfaceMockRecorder is the mock recorder for MockOrderInterface.
type MockOrderInterfaceMockRecorder struct {
	mock *MockOrderInterface
}

// NewMockOrderInterface creates a new mock instance.
func NewMockOrderInterface(ctrl *gomock.Controller) *MockOrderInterface {
	mock := &MockOrderInterface{ctrl: ctrl}
	mock.recorder = &MockOrderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderInterface) EXPECT() *MockOrderInterfaceMockRecorder {
	return m.recorder
}

// Order mocks base method.
func (m *MockOrderInterface) Order(r models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockOrderInterfaceMockRecorder) Order(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockOrderInterface)(nil).Order), r)
}

// ProductsPurchased mocks base method.
func (m *MockOrderInterface) ProductsPurchased(r models.ProductsPurchased) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductsPurchased", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProductsPurchased indicates an expected call of ProductsPurchased.
func (mr *MockOrderInterfaceMockRecorder) ProductsPurchased(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPurchased", reflect.TypeOf((*MockOrderInterface)(nil).ProductsPurchased), r)
}
